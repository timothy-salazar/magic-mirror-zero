""" Tools to get a rough idea of the width and height (in columns and rows) of
the text generated by figlet for specified inputs
"""
import subprocess
import argparse


def text_repr(text, font_path):
    """ Input:
            text: string - the text we want to convert to a large ascii
                representation using figlet
            font_path: string - either the path to the .flf font file we want to
                use, or the name of the font file (if it's in the default figlet
                font directory)
        Output:
            returns a string, which is an ascii art representation of 'text'
    """
    cmd = ['/usr/local/bin/figlet', '-t', '-f', font_path, text]
    result = subprocess.run(cmd, capture_output=True, text=True,check=True)
    return result.stdout

def get_width(text):
    """ Input:
            text: string - a newline separated string, presumably the ascii art
                representation of some text generated by figlet
        Output:
            max_width: int - the maximum width of any the lines in s.
    """
    max_width = max([len(i) for i in text.split('\n')])
    return max_width

def get_height(text):
    """ Input:
            text: string - a newline separated string, presumably the ascii art
                representation of some text generated by figlet
        Output:
            height: int - the number of non-blank lines in s.
    """
    return len([i for i in text.split('\n') if i])

def text_dims(text, font_path):
    """ Input:
            text: string - some text we want to represent as ascii art
            font_path: string - either the path to the .flf font file we want to
                use, or the name of the font file (if it's in the default figlet
                font directory)
        Output:
            width: int - the width of the ascii art created when 'text' is
                rendered by figlet using the font specified by 'font_path'
            height: int - the height of the ascii art created when 'text' is
                rendered by figlet using the font specified by 'font_path'
    """
    width = 0
    height = 0
    # This is here because argparse escapes newlines in its inputs
    text = text.replace('\\n', '\n')
    for line in text.split('\n'):
        line_repr = text_repr(line, font_path)
        width = get_width(line_repr) + width
        height = get_height(line_repr) + height
    return width, height, text_repr(text, font_path)

def get_max_textbox_size(character_set, line_length, line_count, font_path):
    """ Input:
            character_set: string - the set of characters the user expects to be
                used in the text
            line_length: int - the number of characters per line
            line_count: int - the number of lines expected
            font_path: string - either the path to the .flf font file we want to
                use, or the name of the font file (if it's in the default figlet
                font directory)
        Output:
            returns the worst-case width and height of the text box.

    Given the font indicated by font_path, this queries figlet for the ascii
    art representation of each character in character_set. It then goes through
    and finds the widest and tallest characters, and uses these to calculate the
    maximum width and height of the resulting textbox.
    """
    stats = [text_dims(c, font_path) for c in character_set]
    max_width = max([i[0] for i in stats])
    max_height = max([i[1] for i in stats])
    return max_width * line_length, max_height * line_count

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="""
        A tool for getting a rough idea of the size a block of text will take up
        once it's been turned into an ASCII art representation using the figlet
        utility.
        All values are in columns and rows.
        """
    )
    parser.add_argument(
        '-q',
        '--quiet',
        help='''
        Do not print the ascii art representation of the text along with the
        width and height.''',
        action='store_true'
    )
    parser.add_argument(
        '-f',
        '--font-file',
        required=True,
        help='''
        the path to the font file we want figlet to use (or simply the name, if
        the font is installed in figlet's default font directory).'''
    )
    parser.add_argument(
        '-t',
        '--text',
        help='''
        This is the text that will be converted into an ASCII art representation
        of the font specified by --font-file, using the figlet utility, and
        whose textbox size (in columns and rows) will be returned.
        If you want to know the textbox sixe of a multiline block of text,
        separate the lines by newlines ('\n'), or if the text is in a file you
        can feed it with:
        `python estimate_textbox_size.py -f fontfilename -t $(cat filename)`
        '''
    )
    subparsers = parser.add_subparsers(dest='worstcase')
    worstcase = subparsers.add_parser(
        'max',
        description='''
        Rather than returning the size of a given text sample, this instead
        returns the worst case textbox dimensions.
        In order to figure this out, the user needs to provide the character set
        (-c), the number of characters per line (-w), and (if there's going to
        be more than one line) the number of lines of text expected (-h)'''
    )
    worstcase.add_argument(
        '-c',
        '--character-set',
        help='''
        The set of characters for which we want to figure out the max textbox
        size. Should be a single string, i.e.: "abcdefg1234 "'''
    )
    worstcase.add_argument(
        '-w',
        '--line-length',
        type=int,
        help='The number of characters expected per line'
    )
    worstcase.add_argument(
        '-n',
        '--line-number',
        type=int,
        help='The number of lines of text expected',
        default=1
    )

    args = parser.parse_args()

    # Mode 1:
    # The user supplies a block of text and font file, and they want to know
    # how big the ascii representation will be
    if args.text:
        w, h, ascii_rep = text_dims(args.text, args.font_file)
        if not args.quiet:
            print(ascii_rep)
        print(f'Width: {w} columns\t Height: {h} rows')

    # Mode 2:
    # This is for getting the biggest box you'll need to display some text,
    # assuming you know the set of characters that's going to be used, the
    # number of characters per line, and the number of lines
    if args.worstcase:
        w, h = get_max_textbox_size(
            args.character_set, args.line_length,
            args.line_number, args.font_file)
        print('Worst case textbox size:')
        print(f'Width: {w} columns\t Height: {h} rows')
