""" Tools to get a rough idea of the width and height (in columns and rows) of
the text generated by figlet for specified inputs
"""
import subprocess
import argparse


def text_repr(text, font_path):
    """ Input:
            text: string - the text we want to convert to a large ascii
                representation using figlet
            font_path: string - either the path to the .flf font file we want to
                use, or the name of the font file (if it's in the default figlet
                font directory)
        Output:
            returns a string, which is an ascii art representation of 'text'
    """
    cmd = ['/usr/local/bin/figlet','-w','250', '-f', font_path, text]
    result = subprocess.run(cmd, capture_output=True, text=True)
    return result.stdout

def get_width(s):
    """ Input:
            s: string - a newline separated string, presumably the ascii art
                representation of some text generated by figlet
        Output:
            max_width: int - the maximum width of any the lines in s.
    """
    max_width = max([len(i) for i in s.split('\n')])
    return max_width

def get_height(s):
    """ Input:
            s: string - a newline separated string, presumably the ascii art
                representation of some text generated by figlet
        Output:
            height: int - the number of non-blank lines in s.
    """
    return len([i for i in s.split('\n') if i])

def text_dims(text, font_path):
    """ Input:
            text: string - some text we want to represent as ascii art
            string - either the path to the .flf font file we want to
                use, or the name of the font file (if it's in the default figlet
                font directory)
        Output:
            w: int - the width of the ascii art created when 'text' is rendered
                by figlet using the font specified by 'font_path'
            h: int - the height of the ascii art created when 'text' is rendered
                by figlet using the font specified by 'font_path'
    """
    s = text_repr(text, font_path)
    w = get_width(s)
    h = get_height(s)
    return w, h



if __name__ == "__main__":
    # TODO: add multiline parsing for both modes
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-f',
        '--font-file',
        required=True,
        help="the path to the font file we want figlet to use (or the name, if \
            the font is installed in figlet's default font directory).")
    parser.add_argument(
        '-t',
        '--text',
        help='the text '
    )
    subparsers = parser.add_subparsers()
    worstcase = subparsers.add_parser(
        'max',
        description='Rather than returning the size of a given text sample, \
            returns the maximum textbox dimensions for a given line of text \
                and character set.'
        )
    worstcase.add_argument(
        '-c',
        '--character-set',
        help='The set of characters for which we want to figure out the max \
            textbox size. Should be a single string, i.e.: "abcdefg1234 "'
    )
    worstcase.add_argument(
        '-l',
        '--line-length',
        help='The number of characters expected'
    )
    args = parser.parse_args()
    print(args)